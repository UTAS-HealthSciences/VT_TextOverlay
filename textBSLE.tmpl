window.plugin = window.plugin || {};
window.plugin.textoverlay = window.plugin.textoverlay || textOverlay();

function getProp(property, type, pluginID)
{
  if(typeof pluginID !== "string") { pluginID = settings.id; }
  if(typeof property !== "string") { console.error("Error in prop: property should be of type string. Type is " + typeof property); }
  if(typeof type !== "string") { console.error("Error in prop: type should be of type string. Type is " + typeof type); }

  var preStr = "ptplugin["+pluginID+"].settings[0].option[";  /* Concat with necessary var */  var endStr = '].value';
  var val = getKrValue(preStr+property+endStr, type);
  return val;
}

var fDecorate = (getProp("font_underline", "bool", '{{p.id}}') ? "underline " : "") + (getProp("font_strikethrough", "bool", '{{p.id}}') ? "strikethrough" : "");
var fColour = ktools.Color.hex2rgb(getProp("font_colour", "string", '{{p.id}}'));

window.plugin.textoverlay.register('{{p.id}}', {
  id: '{{p.id}}',
  font: {
    size: getProp("font_size", "int", '{{p.id}}'),
    family: getProp("font_family", "string", '{{p.id}}'),
    decoration: fDecorate == "" ? "normal" : fDecorate.trim(),
    style: getProp("font_italics", "bool", '{{p.id}}') ? "italic" : "normal",
    weight: getProp("font_bold", "bool", '{{p.id}}') ? "bold" : "normal",
    color: "rgba("+fColour[0]+","+fColour[1]+","+fColour[2]+","+getProp("font_alpha", "float", '{{p.id}}')+")",
    shadow: getProp('font_shadow', 'bool', '{{p.id}}') ? 'rgb(0, 0, 0) 1px 1px 3.2px' : '',
  },
  position: getProp("position", "string", '{{p.id}}'),
  margin: {
    x: getProp("margin_x", "int", '{{p.id}}'),
    y: getProp("margin_y", "int", '{{p.id}}'),
  },
  text: getProp('text', 'string', '{{p.id}}'),
}).display();

$(document).on('pano_showtourcontrols pano_hidetourcontrols', function(event) {
  window.plugin.textoverlay.get('{{p.id}}').visible(event.type == 'pano_showtourcontrols');
});
